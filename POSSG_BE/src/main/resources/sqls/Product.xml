<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="possg.com.a.dao.ProductDao">
		
<!-- 상품 -->
<!-- 중복 제외 상품 목록 획득 -->
<select id="productList" parameterType="possg.com.a.dto.ProductParam"
	resultType="possg.com.a.dto.ProductDto">
	select MIN(product_seq) AS product_seq
	, MAX(conv_seq) AS conv_seq
	, MIN(category_id) AS category_id
	, product_name
	, MAX(product_roman_name) AS product_roman_name
	, MIN(price) AS price
	, MIN(price_origin) AS price_origin
	, MIN(price_discount) AS price_discount
	, SUM(stock_quantity) AS stock_quantity
	, MIN(expiration_date) AS expiration_date
	, MIN(expiration_flag) AS expiration_flag
	, MAX(discount_rate) AS discount_rate
	, MIN(promotion_info) AS promotion_info
	, MAX(barcode) AS barcode
	, MAX(img_url) AS img_url
	from Product
	<where>
		expiration_flag = 0
		<if test="convSeq != null and convSeq != ''">
		    and conv_seq = #{convSeq}
		</if>
		<if test="choice != null and choice != '' and search != null and search != '' ">
			<if test="choice == 'productName'">
				and product_name like concat('%', #{search}, '%')
			</if>				
		</if>
		<if test="promotionInfo != null and promotionInfo != ''">
            and promotion_info = #{promotionInfo}
        </if>  
        <if test="categoryId != null and categoryId != ''">
            and category_id = #{categoryId}
        </if>
		<choose>
			<when test="minPrice >= 0 and maxPrice > 0">
				and price_discount between #{minPrice} and #{maxPrice}
			</when>
			<when test="minPrice > maxPrice">
				and 1=0
			</when>
			<when test="minPrice >= 0 and maxPrice == 0">
	        and price_discount >= #{minPrice}
	   		</when>
			<otherwise>
			</otherwise>
		</choose>
	</where>
	group by product_name
	order by 
		case when SUM(stock_quantity) = 0 then 1 else 0 end,
	<choose>
		<when test="sortOrder == 'leastExpiry'">
			expiration_date asc
		</when>
		<when test="sortOrder == 'mostExpiry'">
			expiration_date desc
		</when>
		<when test="sortOrder == 'lowestPrice'">
	        <choose>
	        	<when test="stockListCheck == 1">
	        		price_origin asc
	        	</when>
	        	<otherwise>
	        		price_discount asc
	        	</otherwise>
	        </choose>
		</when>
		<when test="sortOrder == 'highestPrice'">
			<choose>
	        	<when test="stockListCheck == 1">
	        		price_origin desc
	        	</when>
	        	<otherwise>
	        		price_discount desc
	        	</otherwise>
	        </choose>
		</when>
		<when test="sortOrder == 'discountRate'">
			discount_rate desc
		</when>
		<when test="sortOrder == 'newest'">
			product_seq desc
		</when>
		<otherwise>
			product_seq asc
		</otherwise>
	</choose>
	limit ${(pageNumber * pageSize)}, #{pageSize}
</select>

<!-- 가장 최근에 추가된 상품의 product_seq 획득 -->
<select id="getLastProduct" parameterType="possg.com.a.dto.ProductDto" resultType="Integer">
	select max(product_seq) from Product;
	where conv_seq = #{convSeq} and expiration_flag = 0
</select>

<!-- 주어진 productSeq로 상품 정보 획득 -->
<select id="findProductSeq" parameterType="possg.com.a.dto.ProductDto" resultType="possg.com.a.dto.ProductDto">
	select * 
    from Product 
    where product_seq = #{productSeq} and expiration_flag = 0
</select>

<!-- 주어진 productName에 해당하는 상품 정보 획득 -->
<select id="findProductName" parameterType="possg.com.a.dto.ProductDto" resultType="possg.com.a.dto.ProductDto">
    select * 
    from Product 
    where product_name = #{productName} and conv_seq = #{convSeq} and expiration_flag = 0
</select>

<!-- conv_seq 별로 검색하는 부분 추가 -->
<select id="findStockName" parameterType="possg.com.a.dto.ProductDto" resultType="possg.com.a.dto.ProductDto">
    select p.* 
    from Product p
    inner join (
        select product_name, COUNT(*) as cnt, SUM(stock_quantity) as total_stock
        from Product
        where conv_seq = #{convSeq} and expiration_flag = 0
        group by product_name
    ) sub
    on p.product_name = sub.product_name 
    where p.product_name = #{productName} and (sub.cnt = 1 or (sub.cnt > 1 and p.stock_quantity > 0)) and p.conv_seq = #{convSeq} and p.expiration_flag = 0
</select>

<!-- 주어진 productName에 해당하는 상품의 총 재고량 획득 -->
<select id="getTotalStock" parameterType="possg.com.a.dto.ProductDto" resultType="int">
  select SUM(stock_quantity) 
  from Product 
  where product_name = #{productName} and conv_seq = #{convSeq} and expiration_flag = 0
</select>

<!-- 주어진 productName에 해당하는 상품번호와 상품의 총 재고량 획득 -->
<select id="getProductSeqAndTotalStock" parameterType="possg.com.a.dto.ProductDto" resultType="possg.com.a.dto.ProductDto">
  select product_seq, stock_quantity, expiration_date, conv_seq,
  (select sum(stock_quantity) from Product where product_name = #{productName} and conv_seq = #{convSeq}) as total_stock
  from Product 
  where product_name = #{productName} and conv_seq = #{convSeq} and expiration_date = #{expirationDate} and expiration_flag = 0
  order by expiration_date asc;
</select>

<!-- 바코드 검색 -->
<select id="findProductBarcode" parameterType="possg.com.a.dto.ProductDto" resultType="possg.com.a.dto.ProductDto">
    select * 
    from Product 
    where barcode = #{barcode} and conv_seq = #{convSeq} and expiration_flag = 0
</select>

<!-- 바코드 검색: 유통기한 지난 expiration -->
<select id="findAllProductBarcode" parameterType="possg.com.a.dto.ProductDto" resultType="possg.com.a.dto.ProductDto">
    select * 
    from Product 
    where barcode = #{barcode} and conv_seq = #{convSeq} and expiration_flag &lt; 2
</select>

<!-- 새로운 상품을 추가 -->
<insert id="addProduct" parameterType="possg.com.a.dto.ProductDto">
	insert into Product(conv_seq, category_id, product_name, product_roman_name, price, price_origin, price_discount, 
	stock_quantity, expiration_date, expiration_flag, discount_rate, promotion_info, barcode, img_url)
	values(#{convSeq}, #{categoryId}, #{productName}, #{productRomanName}, #{price}, #{priceOrigin}, #{priceDiscount}, 
			#{stockQuantity}, #{expirationDate}, #{expirationFlag}, #{discountRate}, 
			#{promotionInfo}, #{barcode}, #{imgUrl})
</insert>

<!-- 상품 재고 업데이트 -->
<update id="updateProductStock" parameterType="possg.com.a.dto.ProductDto">
	update Product
	set stock_quantity = #{stockQuantity}
	where product_seq = #{productSeq}
</update>

<!-- 상품 삭제 -->
<delete id="deleteProduct" parameterType="possg.com.a.dto.ProductDto">
    delete from Product
    where product_seq = #{productSeq}
</delete>

<!-- 상품 삭제: 동일한 상품중 잔여 정보 -->
<delete id="deleteProductRegiInfo" parameterType="possg.com.a.dto.ProductDto">
    delete from Product
    where product_name = #{productName} and expiration_date != #{expirationDate} and stock_quantity = 0 and conv_seq = #{convSeq} and expiration_flag = 0
</delete>

<!-- 상품: 유통기한 만료 상품 폐기 처리 -->
<update id="updateProductExpirationFlag" parameterType="possg.com.a.dto.ProductDto">
	update Product
	set expiration_flag = #{expirationFlag}
	where barcode = #{barcode} and conv_seq = #{convSeq}
</update>

<!-- 점주 발주 대기 -->
<!-- 모든 발주 대기 목록 획득. (call_status -1 제외) -->
<select id="getAllCallProductConvList" parameterType="possg.com.a.dto.CallProductConvDto" resultType="possg.com.a.dto.CallProductConvDto">
	select * from Call_product_conv
	where conv_seq = #{convSeq} and call_status != -1
	order by call_seq desc;
</select>

<!-- 대기 상품의 총 개수, 종류 개수, 판매가, 원가 -->
<select id="getCallProductTotalInfo" parameterType="possg.com.a.dto.CallProductConvDto"
	resultType="possg.com.a.dto.CallProductConvParam">
	select 
	    sum(amount) as total_amount, 
	    sum(amount * price) as total_price, 
	    sum(amount * price_origin) as total_price_origin,
	    count(distinct product_name) as total_product
	from Call_product_conv
	where call_ref = #{callRef} and conv_seq = #{convSeq} and call_status != -1
</select>

<!-- 주어진 callRef에 해당하는 발주 상품 목록 획득 -->
<select id="getRefCallProductConvList" parameterType="possg.com.a.dto.CallProductConvDto" resultType="possg.com.a.dto.CallProductConvDto">
	select * from Call_product_conv
	where call_ref = #{callRef} and conv_seq = #{convSeq} and call_status != -1
	order by call_seq desc
	
</select>

<!-- 주어진 callSeq에 해당하는 발주 상품 정보 획득. (call_status -1 제외) -->
<select id="getSeqCallProductConv" parameterType="possg.com.a.dto.CallProductConvDto" resultType="possg.com.a.dto.CallProductConvDto">
	select * from Call_product_conv
	where call_seq = #{callSeq} and conv_seq = #{convSeq} and call_status != -1;
</select>

<!-- call_status가 0이고 productName이 일치하는 발주 상품 정보 획득 -->
<select id="findCallProductConvName" parameterType="possg.com.a.dto.CallProductConvDto" resultType="possg.com.a.dto.CallProductConvDto">
    select * from Call_product_conv 
    where product_name = #{productName} and conv_seq = #{convSeq} and call_status = 0 
</select>

<!-- 새로운 발주 상품 추가 -->
<insert id="addCallProductConv" parameterType="possg.com.a.dto.ProductDto">
  insert into Call_product_conv (conv_seq, product_seq, amount, rp_name,
   b_name, price, price_origin, call_date, product_name, 
   call_ref, call_status, img_url)
  select #{convSeq}, #{productSeq}, #{amount}, c.representative_name, 
    c.branch_name, #{price}, #{priceOrigin}, #{callDate}, #{productName}, 
    '0', 0, #{imgUrl}
  from Convenience c
  where c.conv_seq = #{convSeq};
</insert>

<!-- 발주 상품의 amount와 price 업데이트 -->
<update id="updateCallProductConv" parameterType="possg.com.a.dto.CallProductConvDto">
	update Call_product_conv
	set amount = #{amount}, price = #{price}, price_origin = #{priceOrigin}
	where product_name = #{productName} and call_ref = #{callRef} and conv_seq = #{convSeq} and call_status != -1;
</update>

<!-- callRef와 call_status 업데이트 -->
<update id="updateRefCallProductConv" parameterType="possg.com.a.dto.CallProductConvDto">
	update Call_product_conv
	set call_ref = #{callRef}, call_status = 1
	where call_ref = '0' and conv_seq = #{convSeq} and call_status != -1;
</update>

<!-- 발주 상품 주문 취소 -->
<!-- 주어진 callRef에 해당하는 발주 상품의 call_status를 '-1'로 설정 -->
<update id="cancelCallRefProductConv" parameterType="possg.com.a.dto.CallProductConvOrderListDto">
    update Call_product_conv
    set call_status = 0, call_ref = '0'
    where call_ref = #{callRef} and conv_seq = #{convSeq} and call_status != -1
</update>

<!-- 발주 상품 수령 완료 -->
<update id="statusUpdateCallRefProductConv" parameterType="possg.com.a.dto.CallProductConvOrderListDto">
    update Call_product_conv
    set call_status = case 
        when call_status &lt; 3 then call_status + 1
        else call_status
    end
    where call_ref = #{callRef} and conv_seq = #{convSeq} and call_status != -1;
</update>

<update id="completeCallRefProductConv" parameterType="possg.com.a.dto.CallProductConvOrderListDto">
    update Call_product_conv
    set call_status = -1
    where call_ref = #{callRef} and conv_seq = #{convSeq} and call_status != -1;
</update>

<!-- 주어진 callRef와 productName에 해당하는 발주 상품 삭제 -->
<delete id="deleteCallProductConv" parameterType="possg.com.a.dto.CallProductConvDto">
    delete from Call_product_conv
    where call_ref = #{callRef} and product_name = #{productName} and conv_seq = #{convSeq} and call_status != -1
</delete>

<!-- 점주 발주 -->
<!-- 모든 발주 목록 획득 -->
<select id="getAllConvOrderList" parameterType="possg.com.a.dto.CallProductConvParam" 
resultType="possg.com.a.dto.CallProductConvOrderListDto">
	select * from Call_product_conv_order_list
	where conv_seq = #{convSeq} and call_status != 0 and call_status != -1
	order by call_ref desc
	limit ${(pageNumber * pageSize)}, #{pageSize}
</select>

<select id="getOrderListTotalNumber" parameterType="possg.com.a.dto.CallProductConvDto" resultType="Integer">
	select count(*) from Call_product_conv_order_list
	where conv_seq = #{convSeq} and call_status != 0 and call_status != -1
</select>

<!-- 주어진 callRef에 해당하는 발주 주문 목록 획득 -->
<select id="getRefConvOrderList" parameterType="possg.com.a.dto.CallProductConvDto" 
resultType="possg.com.a.dto.CallProductConvOrderListDto">
	select * from Call_product_conv_order_list
	where call_ref = #{callRef} and conv_seq = #{convSeq}
	order by call_ref desc
	limit ${(pageNumber * pageSize)}, #{pageSize}
</select>

<!-- 새로운 발주 주문 추가 -->
<insert id="addConvOrderList" parameterType="possg.com.a.dto.CallProductConvOrderListDto">
    INSERT INTO Call_product_conv_order_list (seq, conv_seq, call_ref, call_date, call_status, call_total_number, call_total_price, call_remark)
    VALUES (#{seq}, #{convSeq}, #{callRef}, #{callDate}, #{callStatus}, #{callTotalNumber}, #{callTotalPrice}, #{callRemark})
</insert>

<!-- 발주 주문 정보 업데이트 -->
<update id="updateConvOrderList" parameterType="possg.com.a.dto.CallProductConvOrderListDto">
    UPDATE Call_product_conv_order_list
    SET call_status=#{callStatus}, call_total_number=#{callTotalNumber}, call_total_price=#{callTotalPrice}, call_remark=#{callRemark}
    WHERE call_ref = #{callRef} and conv_seq = #{convSeq} and call_status &gt; 0
</update>

<!-- 발주 대기 상품 삭제 시 주문 목록에 반영  -->
<update id="updateCallToOrderList" parameterType="possg.com.a.dto.CallProductConvOrderListDto">
	update Call_product_conv_order_list
	set call_total_number=#{callTotalNumber}, call_total_price=#{callTotalPrice}
	where call_ref = #{callRef} and conv_seq = #{convSeq} and call_status &gt; 0
</update>

<!-- 점주 발주 취소 -->
<delete id="cancelConvOrderList" parameterType="possg.com.a.dto.CallProductConvOrderListDto">
    delete from Call_product_conv_order_list
    where call_ref = #{callRef} and conv_seq = #{convSeq} and call_status &gt; 0
</delete>

<!-- 발주 주문 상품 수령 완료 -->
<update id="statusUpdateConvOrderList" parameterType="possg.com.a.dto.CallProductConvOrderListDto">
    update Call_product_conv_order_list
    set call_status = case 
        when call_status &lt; 3 then call_status + 1
        else call_status
    end
    where call_ref = #{callRef} and conv_seq = #{convSeq} and call_status != -1
</update>

<update id="statusUpdateConvOrderAndProduct" parameterType="possg.com.a.dto.CallProductConvOrderListDto">
    UPDATE `Call_product_conv_order_list` AS `order`
    JOIN `Call_product_conv` AS `conv` ON `order`.`call_ref` = `conv`.`call_ref`
    SET order.call_status = CASE 
        WHEN order.call_status &lt; 3 THEN order.call_status + 1
        ELSE order.call_status
        END,
    conv.call_status = CASE 
        WHEN conv.call_status &lt; 3 THEN conv.call_status + 1
        ELSE conv.call_status 
        END
    WHERE order.call_ref = #{callRef} AND order.conv_seq = #{convSeq} AND order.call_status != -1
</update>

<update id="completeConvOrderAndProduct" parameterType="possg.com.a.dto.CallProductConvOrderListDto">
    UPDATE `Call_product_conv_order_list` AS `order`
    JOIN `Call_product_conv` AS `conv` ON `order`.`call_ref` = `conv`.`call_ref`
    SET order.call_status = -1, 
    	conv.call_status = -1
    WHERE order.call_ref = #{callRef} AND order.conv_seq = #{convSeq} AND order.call_status != -1
</update>


<!-- 고객 발주 상품 목록 -->

<insert id="addCallProductCustomer" parameterType="possg.com.a.dto.CallProductCustomerDto">
  insert into call_product_customer (customer_id, product_seq, amount, c_name, b_name, price, call_date, product_name)
  values (#{customerId}, #{productSeq}, #{amount}, #{cName}, #{bName}, #{price}, #{callDate}, #{productName})
</insert>


<!-- 편의점 -->
<!-- 주어진 branchName에 해당하는 편의점 정보 획득 -->
<select id="getConvenienceInfo" parameterType="String" resultType="possg.com.a.dto.ConvenienceDto">
	select * from Convenience where branch_name = #{branchName};
</select>

<!--  모든 편의점 정보 획득 -->
<select id="getAllConvenience" resultType="possg.com.a.dto.ConvenienceDto">
	select * from Convenience;
</select>

<!-- 모든 상품의 갯수 -->
<select id="getProductTotalNumber" parameterType="possg.com.a.dto.ProductParam"
	resultType="java.lang.Integer">
	select count(distinct product_name)
	from Product
	<where>
		<if test="convSeq != null and convSeq != ''">
        	conv_seq = #{convSeq}
   		</if>
		<if test="choice != null and choice != '' and search != null and search != '' ">
			<if test="choice == 'productName'">
				and product_name like concat('%', #{search}, '%')
			</if>				
		</if>
		<if test="promotionInfo != null and promotionInfo != ''">
            and promotion_info = #{promotionInfo}
        </if>
        <if test="categoryId != null and categoryId != ''">
            and category_id = #{categoryId}
        </if>
		<choose>
			<when test="minPrice >= 0 and maxPrice > 0">
				and price between #{minPrice} and #{maxPrice}
			</when>
			<when test="minPrice > maxPrice">
				and 1=0
			</when>
			<when test="minPrice >= 0 and maxPrice == 0">
	        and price >= #{minPrice}
	   		</when>
			<otherwise>
			</otherwise>
		</choose>
	</where>
</select>


<!-- 모든 상품 -->
<select id="getAllProduct" parameterType="possg.com.a.dto.ProductParam" 
resultType="possg.com.a.dto.ProductDto">
	select * from Product
</select>

<!-- 유통기한 지난 상품 자동 업데이트 -->
<update id="updateExpirationFlagAuto">
	update Product
    set expiration_flag = 1
    where expiration_flag = 0 and expiration_date &lt; DATE_ADD(NOW(), INTERVAL 2+9 HOUR);
</update>

<!-- 상품 원가 할당 -->
<update id="updateProductOriginPrice" parameterType="possg.com.a.dto.ProductDto">
	update Product
	set price_origin = #{priceOrigin}
	where product_seq = #{productSeq}
</update>

<!-- 영양정보 출력 -->
<select id="getNutritionInfo" parameterType="possg.com.a.dto.NutritionDto"
resultType="possg.com.a.dto.NutritionDto">
	SELECT P.product_name, N.* 
	FROM Nutrition N
	JOIN Product P ON N.product_seq = P.product_seq
	WHERE P.product_seq = #{productSeq};
</select>

<!-- 영양정보 입력 -->
<insert id="addNutritionInfo" parameterType="possg.com.a.dto.NutritionDto">
	insert into Nutrition(
	nutrition_seq, product_seq,
	serving_size, serving_size_amount,
	calorie, calorie_amount, 
	carbohydrate, carbohydrate_amount,
	protein, protein_amount, 
	fat, fat_amount, 
	cholesterol, cholesterol_amount, 
	sodium, sodium_amount, 
	dietary_fiber, dietary_fiber_amount,
	potassium, potassium_amount)
	values (0, #{productSeq}, #{servingSize}, #{servingSizeAmount}, #{calorie}, #{calorieAmount}, #{carbohydrate}, #{carbohydrateAmount},
	#{protein}, #{proteinAmount}, #{fat}, #{fatAmount}, #{cholesterol}, #{cholesterolAmount}, #{sodium}, #{sodiumAmount}, #{dietaryFiber}, #{dietaryFiberAmount},
	#{potassium}, #{potassiumAmount})
</insert>

<!-- 현재 사용하지 않는 기능 -->
<!-- 대기 상품의 총 갯수 -->
<select id="getCallProductTotalAmount" parameterType="possg.com.a.dto.CallProductConvDto"
	resultType="java.lang.Integer">
	select sum(amount)
	from Call_product_conv
	where call_ref = #{callRef} and conv_seq = #{convSeq} and call_status != -1
</select>
<!-- 대기 상품의 총 가격 -->
<select id="getCallProductTotalPrice" parameterType="possg.com.a.dto.CallProductConvDto"
	resultType="java.lang.Integer">
	select sum(price)
	from Call_product_conv
	where call_ref = #{callRef} and conv_seq = #{convSeq} and call_status != -1
</select>

<!-- 대기 상품 원가의 총 액수 -->
<select id="getCallProductTotalPriceOrigin" parameterType="possg.com.a.dto.CallProductConvDto"
	resultType="java.lang.Integer">
	select sum(price_origin)
	from Call_product_conv
	where call_ref = #{callRef} and conv_seq = #{convSeq} and call_status != -1
</select>

<!-- 주어진 productSeq로 상품 정보 획득 -->
<select id="findProductSeq" parameterType="possg.com.a.dto.ProductDto" resultType="possg.com.a.dto.ProductDto">
   	select * 
    from Product 
    where product_seq = #{productSeq} and expiration_flag = 0
</select>

</mapper>